---
- name: Install DockerIO
  package:
    name: docker.io
    state: present
  tags: install 

- name: Install Docker Python Requirements
  pip:
    name: "{{ item }}"
    executable: pip3 
    state: latest 
  loop:
    - docker
    - jsondiff
    - pyyaml
  tags:
    - install
    - pip

- name: Start and Enable Docker Service
  systemd:
    name: docker
    state: started
    enabled: true

- name: Copy CA Certificate for Docker
  copy:
    src: "{{ certs_folder | default('') }}{{ ca_certs | first }}"
    dest: "/usr/local/share/ca-certificates/{{ ca_certs | first }}"
    mode: "0644"

# - name: Copy Private Key for Docker
#   copy:
#     src: "{{ certs_folder | default('') }}{{ inventory_hostname }}.pem"
#     dest: "/etc/pki/tls/private/{{ inventory_hostname }}.pem"
#     mode: "0400"

# - name: Copy Certificate for Docker
#   copy:
#     src: "{{ certs_folder | default('') }}{{ inventory_hostname }}.crt"
#     dest: "/etc/pki/tls/certs/{{ inventory_hostname }}.crt"
#     mode: "0644"

- name: Init Docker Swarm
  docker_swarm:
    state: present
    listen_addr: "{{ ansible_host }}:2377"
    advertise_addr: "{{ ansible_host }}:2377"
    default_addr_pool: "{{ docker.default_addr_pool }}"
    subnet_size: "{{ docker.subnet_size }}"
  when:
    - roles.master is defined 
    - roles.master
  register: swarm_init

- name: Set Swarm Token
  set_fact:
    swarm_token: "{{ hostvars[item].swarm_init.swarm_facts.JoinTokens.Worker }}"
  loop: "{{ groups['all'] }}"
  when:
    - hostvars[item].roles.manager is defined 
    - hostvars[item].roles.manager
    - hostvars[item].swarm_init is defined
  tags: debug

- name: DEBUG
  debug:
    var: swarm_init

- name: Set Manager IP Addresses
  set_fact:
    manager_ips: "{{ manager_ips | default([]) + [hostvars[item].ansible_host] }}"
  loop: "{{ groups['all'] }}"
  when:
    - hostvars[item].roles.manager is defined 
    - hostvars[item].roles.manager
  tags: debug

- name: Join Workers
  docker_swarm:
    state: join
    listen_addr: "{{ ansible_host }}:2377"
    advertise_addr: "{{ ansible_host }}:2377"
    remote_addrs: "{{ manager_ips }}"
    join_token: "{{ swarm_token }}"
  when: 
    - (roles.master is not defined) or (not roles.master)
  register: swarm_init

- name: Create Docker Networks
  docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('overlay') }}"
    scope: "{{ item.scope | default('swarm') }}"
    attachable: "{{ item.attachable | default(true) }}"
    enable_ipv6: "{{ item.enable_ipv6 | default(false) }}"
    state: "{{ item.state }}"
    ipam_config: "{{ item.ipam_config }}"
  loop: "{{ docker.networks }}"
  when:
    - roles.master is defined 
    - roles.master

- name: DEBUG
  debug:
    msg: "{{ item.0 }} - {{ item.1 }}"
  tags:
    - test 
  vars: 
    folders:
      - "docker"
      - "volumes"
  loop: "{{ docker | json_query('stacks[*].name') | product(folders) | list }}"

- name: Create Stack Folders
  file: 
    path: "{{ gluster.mount }}/stacks/{{ item[0] }}/{{ item[1] }}"
    state: directory
    recurse: true
  vars: 
    folders:
      - "docker"
      - "volumes"
  loop: "{{ docker | json_query('stacks[*].name') | product(folders) | list }}"
  when:
    - roles.master is defined 
    - roles.master

- name: Create Volumes Folders
  file:
    path: "{{ gluster.mount }}/stacks/{{ item[0].name }}/volumes/{{ item[1] }}"
    state: directory
  loop: "{{ docker.stacks | subelements('volumes') }}"
  loop_control:
    label: "{{ item[0].name }} - {{ item[1] }}"
  when:
    - roles.master is defined 
    - roles.master 

- name: Copy Docker Files for Stacks
  copy:
    src: "{{ item.name }}/docker/"
    dest: "{{ gluster.mount }}/stacks/{{ item.name }}/docker"
  loop: "{{ docker.stacks }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - roles.master is defined 
    - roles.master
  run_once: true

- name: Run Stacks
  docker_stack:
    name: "{{ item.name }}"
    compose: 
      - "{{ gluster.mount }}/stacks/{{ item.name }}/docker/docker-compose.yml"
    state: present
  loop: "{{ docker.stacks }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - roles.master is defined 
    - roles.master
  run_once: true

- name: Copy Config Files
  copy:
    src: "{{ item.name }}/config/"
    dest: "{{ gluster.mount }}/stacks/{{ item.name }}/volumes/config"
  loop: "{{ docker.stacks }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - roles.master is defined 
    - roles.master
    - item.config
  run_once: true


